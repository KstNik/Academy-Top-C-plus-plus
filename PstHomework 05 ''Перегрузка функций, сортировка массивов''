#include <iostream>
#include <math.h>
#include <stdlib.h>
#include <time.h>
using namespace std;
const int ordMatrix = 5;
const int sizeAr1D = 7;
const int rowAr2D = 7, colAr2D = 7;
const int rowAr3D = 7, colAr3D = 7, layAr3D = 7;

int FuncFillingMatrix(int arrayMatrix[][ordMatrix], int ordMatrix) { // заполнение матрицы, тип int
	int i, j;
	for (i = 0; i < ordMatrix; i++) {
		for (j = 0; j < ordMatrix; j++)
			arrayMatrix[i][j] = rand() % 90 + 10;
	}
	return 0;
}

int FuncVisialMatrix(int arrayMatrix[][ordMatrix], int ordMatrix) { // визуализация матрицы, тип int
	int i, j;
	for (i = 0; i < ordMatrix; i++) {
		cout << "       ";
		for (j = 0; j < ordMatrix; j++) {
			cout << arrayMatrix[i][j] << " ";
		}
		cout << endl;
	}
	return 0;
}

int FuncMinMaxMainDiag(int arrayMatrix[][ordMatrix], int ordMatrix) { // поиск min и max значений на главной диагонали, тип int
	int arMinMax[2] = { arrayMatrix[0][0], arrayMatrix[0][0] };
	int i;
	for (i = 1; i < ordMatrix; i++) {
		if (arMinMax[0] > arrayMatrix[i][i]) arMinMax[0] = arrayMatrix[i][i];
		if (arMinMax[1] < arrayMatrix[i][i]) arMinMax[1] = arrayMatrix[i][i];
	}
	cout << arMinMax[0] << " и " << arMinMax[1];
	return 0;
}

int FuncSortRowElem(int arrayMatrix[][ordMatrix], int ordMatrix) { // сортировка элементов в строках по возрастанию, тип int
	int element;
	int i, j, k;
	for (i = 0; i < ordMatrix; i++) {
		for (j = 0; j < ordMatrix; j++) {
			element = arrayMatrix[i][j];
			for (k = j - 1; k >= 0 && arrayMatrix[i][k] > element; k--)
				arrayMatrix[i][k + 1] = arrayMatrix[i][k];
			arrayMatrix[i][k + 1] = element;
		}
	}
	return 0;
}

double FuncFillingMatrix(double arrayMatrix[][ordMatrix], int ordMatrix) { // заполнение матрицы, тип double
	int i, j;
	for (i = 0; i < ordMatrix; i++) {
		for (j = 0; j < ordMatrix; j++)
			arrayMatrix[i][j] = (double)rand() / (double)RAND_MAX * (1000 - 100) + 100;
	}
	return 0;
}

double FuncVisialMatrix(double arrayMatrix[][ordMatrix], int ordMatrix) { // визуализация матрицы, тип double
	int i, j;
	for (i = 0; i < ordMatrix; i++) {
		cout << "       ";
		for (j = 0; j < ordMatrix; j++) {
			cout << arrayMatrix[i][j] << " ";
		}
		cout << endl;
	}
	return 0;
}

double FuncMinMaxMainDiag(double arrayMatrix[][ordMatrix], int ordMatrix) { // поиск min и max значений на главной диагонали, тип double
	double arMinMax[2] = { arrayMatrix[0][0], arrayMatrix[0][0] };
	int i;
	for (i = 1; i < ordMatrix; i++) {
		if (arMinMax[0] > arrayMatrix[i][i]) arMinMax[0] = arrayMatrix[i][i];
		if (arMinMax[1] < arrayMatrix[i][i]) arMinMax[1] = arrayMatrix[i][i];
	}
	cout << arMinMax[0] << " и " << arMinMax[1];
	return 0;
}

double FuncSortRowElem(double arrayMatrix[][ordMatrix], int ordMatrix) { // сортировка элементов в строках по возрастанию, тип double
	double element;
	int i, j, k;
	for (i = 0; i < ordMatrix; i++) {
		for (j = 0; j < ordMatrix; j++) {
			element = arrayMatrix[i][j];
			for (k = j - 1; k >= 0 && arrayMatrix[i][k] > element; k--)
				arrayMatrix[i][k + 1] = arrayMatrix[i][k];
			arrayMatrix[i][k + 1] = element;
		}
	}
	return 0;
}

char FuncFillingMatrix(char arrayMatrix[][ordMatrix], int ordMatrix) { // заполнение матрицы, тип char
	int i, j;
	for (i = 0; i < ordMatrix; i++) {
		for (j = 0; j < ordMatrix; j++)
			arrayMatrix[i][j] = rand() % 25 + 66;
	}
	return 0;
}

char FuncVisialMatrix(char arrayMatrix[][ordMatrix], int ordMatrix) { // визуализация матрицы, тип char
	int i, j;
	for (i = 0; i < ordMatrix; i++) {
		cout << "       ";
		for (j = 0; j < ordMatrix; j++) {
			cout << arrayMatrix[i][j] << " ";
		}
		cout << endl;
	}
	return 0;
}

char FuncMinMaxMainDiag(char arrayMatrix[][ordMatrix], int ordMatrix) { // поиск min и max значений на главной диагонали, тип char
	char arMinMax[2] = { arrayMatrix[0][0], arrayMatrix[0][0] };
	int i;
	for (i = 1; i < ordMatrix; i++) {
		if (arMinMax[0] > arrayMatrix[i][i]) arMinMax[0] = arrayMatrix[i][i];
		if (arMinMax[1] < arrayMatrix[i][i]) arMinMax[1] = arrayMatrix[i][i];
	}
	cout << arMinMax[0] << " и " << arMinMax[1];
	return 0;
}

char FuncSortRowElem(char arrayMatrix[][ordMatrix], int ordMatrix) { // сортировка элементов в строках по возрастанию, тип char
	char element;
	int i, j, k;
	for (i = 0; i < ordMatrix; i++) {
		for (j = 0; j < ordMatrix; j++) {
			element = arrayMatrix[i][j];
			for (k = j - 1; k >= 0 && arrayMatrix[i][k] > element; k--)
				arrayMatrix[i][k + 1] = arrayMatrix[i][k];
			arrayMatrix[i][k + 1] = element;
		}
	}
	return 0;
}

template <typename T> T FuncVisialMatrixSample(T arrayMatrix[][ordMatrix], int ordMatrix) { // визуализация массива
	int i, j;
	for (i = 0; i < ordMatrix; i++) {
		cout << "       ";
		for (j = 0; j < ordMatrix; j++) {
			cout << arrayMatrix[i][j] << " ";
		}
		cout << endl;
	}
	return 0;
}

template <typename T> T FuncMinMaxMainDiagSample(T arrayMatrix[][ordMatrix], int ordMatrix) { // поиск min и max значений на главной диагонали
	T arMinMax[2] = { arrayMatrix[0][0], arrayMatrix[0][0] };
	int i;
	for (i = 1; i < ordMatrix; i++) {
		if (arMinMax[0] > arrayMatrix[i][i]) arMinMax[0] = arrayMatrix[i][i];
		if (arMinMax[1] < arrayMatrix[i][i]) arMinMax[1] = arrayMatrix[i][i];
	}
	cout << arMinMax[0] << " и " << arMinMax[1];
	return 0;
}

template <typename T> T FuncSortRowElemSample(T arrayMatrixTwin[][ordMatrix], int ordMatrix) { // сортировка элементов в строках по возрастанию
	T element;
	int i, j, k;
	for (i = 0; i < ordMatrix; i++) {
		for (j = 0; j < ordMatrix; j++) {
			element = arrayMatrixTwin[i][j];
			for (k = j - 1; k >= 0 && arrayMatrixTwin[i][k] > element; k--)
				arrayMatrixTwin[i][k + 1] = arrayMatrixTwin[i][k];
			arrayMatrixTwin[i][k + 1] = element;
		}
	}
	return 0;
}

template <typename T> T FuncVisialMatrixTwinSample(T arrayMatrixTwin[][ordMatrix], int ordMatrix) { // визуализация матрицы – близнеца
	int i, j;
	for (i = 0; i < ordMatrix; i++) {
		cout << "       ";
		for (j = 0; j < ordMatrix; j++) {
			cout << arrayMatrixTwin[i][j] << " ";
		}
		cout << endl;
	}
	return 0;
}

void FuncMatrixInt() {
	int arrayMatrix[ordMatrix][ordMatrix];
	int arrayMatrixTwin[ordMatrix][ordMatrix];
	int i, j;
	FuncFillingMatrix(arrayMatrix, ordMatrix);
	cout << "  а) целые числа (тип int):" << endl;
	cout << "     визуализация, функции:" << endl;
	cout << "     – перегруженная:" << endl;
	FuncVisialMatrix(arrayMatrix, ordMatrix);
	cout << "     – шаблон:" << endl;
	FuncVisialMatrixSample(arrayMatrix, ordMatrix);
	cout << "     min и max элементы главной диагонали:" << endl;
	cout << "     – перегруженная: ";
	FuncMinMaxMainDiag(arrayMatrix, ordMatrix);
	cout << endl;
	cout << "     – шаблон: ";
	FuncMinMaxMainDiagSample(arrayMatrix, ordMatrix);
	cout << endl;
	cout << "     сортировка элементов в строках по возрастанию:" << endl;
	for (i = 0; i < ordMatrix; i++) { // создание матрицы – близнеца для сортировки элементов строк шаблоном функции
		for (j = 0; j < ordMatrix; j++)
			arrayMatrixTwin[i][j] = arrayMatrix[i][j];
	}
	cout << "     – перегруженная:" << endl;
	FuncSortRowElem(arrayMatrix, ordMatrix);
	FuncVisialMatrix(arrayMatrix, ordMatrix);
	cout << "     – шаблон:" << endl;
	FuncSortRowElemSample(arrayMatrixTwin, ordMatrix);
	FuncVisialMatrixTwinSample(arrayMatrixTwin, ordMatrix);
}

void FuncMatrixDouble() {
	double arrayMatrix[ordMatrix][ordMatrix];
	double arrayMatrixTwin[ordMatrix][ordMatrix];
	int i, j;
	FuncFillingMatrix(arrayMatrix, ordMatrix);
	cout << "  б) числа с плавающей точкой (тип – double):" << endl;
	cout << "     визуализация, функции:" << endl;
	cout << "     – перегруженная:" << endl;
	FuncVisialMatrix(arrayMatrix, ordMatrix);
	cout << "     – шаблон:" << endl;
	FuncVisialMatrixSample(arrayMatrix, ordMatrix);
	cout << "     min и max элементы главной диагонали:" << endl;
	cout << "     – перегруженная: ";
	FuncMinMaxMainDiag(arrayMatrix, ordMatrix);
	cout << endl;
	cout << "     – шаблон: ";
	FuncMinMaxMainDiagSample(arrayMatrix, ordMatrix);
	cout << endl;
	cout << "     сортировка элементов в строках по возрастанию:" << endl;
	for (i = 0; i < ordMatrix; i++) { // создание матрицы – близнеца для сортировки элементов строк шаблоном функции
		for (j = 0; j < ordMatrix; j++)
			arrayMatrixTwin[i][j] = arrayMatrix[i][j];
	}
	cout << "     – перегруженная:" << endl;
	FuncSortRowElem(arrayMatrix, ordMatrix);
	FuncVisialMatrix(arrayMatrix, ordMatrix);
	cout << "     – шаблон:" << endl;
	FuncSortRowElemSample(arrayMatrixTwin, ordMatrix);
	FuncVisialMatrixTwinSample(arrayMatrixTwin, ordMatrix);
}

void FuncMatrixChar() {
	char arrayMatrix[ordMatrix][ordMatrix];
	char arrayMatrixTwin[ordMatrix][ordMatrix];
	char i, j;
	FuncFillingMatrix(arrayMatrix, ordMatrix);
	cout << "  в) символы (тип – char):" << endl;
	cout << "     визуализация, функции:" << endl;
	cout << "     – перегруженная:" << endl;
	FuncVisialMatrix(arrayMatrix, ordMatrix);
	cout << "     – шаблон:" << endl;
	FuncVisialMatrixSample(arrayMatrix, ordMatrix);
	cout << "     min и max элементы главной диагонали:" << endl;
	cout << "     – перегруженная: ";
	FuncMinMaxMainDiag(arrayMatrix, ordMatrix);
	cout << endl;
	cout << "     – шаблон: ";
	FuncMinMaxMainDiagSample(arrayMatrix, ordMatrix);
	cout << endl;
	cout << "     сортировка элементов в строках по возрастанию:" << endl;
	for (i = 0; i < ordMatrix; i++) { // создание матрицы – близнеца для сортировки элементов строк шаблоном функции
		for (j = 0; j < ordMatrix; j++)
			arrayMatrixTwin[i][j] = arrayMatrix[i][j];
	}
	cout << "     – перегруженная:" << endl;
	FuncSortRowElem(arrayMatrix, ordMatrix);
	FuncVisialMatrix(arrayMatrix, ordMatrix);
	cout << "     – шаблон:" << endl;
	FuncSortRowElemSample(arrayMatrixTwin, ordMatrix);
	FuncVisialMatrixTwinSample(arrayMatrixTwin, ordMatrix);
}

int FuncMaxArray1D(int array1D[], int sizeAr1D) { // Поиск максимального значения в одномерном массиве, тип int
	array1D[sizeAr1D];
	int i;
	int maxAr1D = array1D[0];
	for (i = 1; i < sizeAr1D; i++)
		if (array1D[i] > maxAr1D) maxAr1D = array1D[i];
	return maxAr1D;
}

double FuncMaxArray1D(double array1D[], int sizeAr1D) { // Поиск максимального значения в одномерном массиве, тип double
	array1D[sizeAr1D];
	int i;
	double maxAr1D = array1D[0];
	for (i = 1; i < sizeAr1D; i++)
		if (array1D[i] > maxAr1D) maxAr1D = array1D[i];
	return maxAr1D;
}

char FuncMaxArray1D(char array1D[], int sizeAr1D) { // Поиск максимального значения в одномерном массиве, тип char
	array1D[sizeAr1D];
	int i;
	char maxAr1D = array1D[0];
	for (i = 1; i < sizeAr1D; i++)
		if (array1D[i] > maxAr1D) maxAr1D = array1D[i];
	return maxAr1D;
}

template <typename T> T FuncMaxArray1DSample(T array1D[], int sizeAr1D) { // Поиск максимального значения в одномерном массиве
	array1D[sizeAr1D];
	int i;
	T maxAr1D = array1D[0];
	for (i = 1; i < sizeAr1D; i++)
		if (array1D[i] > maxAr1D) maxAr1D = array1D[i];
	return maxAr1D;
}

void FuncFillingIntArray1D() {
	int array1D[sizeAr1D];
	int i;
	cout << "   – целые числа (тип int):" << endl;
	cout << "     ";
	for (i = 0; i < sizeAr1D; i++) {
		array1D[i] = rand() % 90 + 10;
		cout << array1D[i] << " ";
	}
	cout << endl;
	cout << "     max (перегруженная) = " << FuncMaxArray1D(array1D, sizeAr1D) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMaxArray1DSample(array1D, sizeAr1D) << ";" << endl;
}

void FuncFillingDoubleArray1D() {
	double array1D[sizeAr1D];
	int i;
	cout << "   – числа с плавающей точкой (тип – double):" << endl;
	cout << "     ";
	for (i = 0; i < sizeAr1D; i++) {
		array1D[i] = (double)rand() / (double)RAND_MAX * (1000 - 100) + 100;
		cout << array1D[i] << " ";
	}
	cout << endl;
	cout << "     max (перегруженная) = " << FuncMaxArray1D(array1D, sizeAr1D) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMaxArray1DSample(array1D, sizeAr1D) << ";" << endl;
}

void FuncFillingCharArray1D() {
	char array1D[sizeAr1D];
	int i;
	cout << "   – символы (тип – char):" << endl;
	cout << "     ";
	for (i = 0; i < sizeAr1D; i++) {
		array1D[i] = rand() % 25 + 65;
		cout << array1D[i] << " ";
	}
	cout << endl;
	cout << "     max (перегруженная) = " << FuncMaxArray1D(array1D, sizeAr1D) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMaxArray1DSample(array1D, sizeAr1D) << "." << endl;
}

int FuncMaxArray2D(int array2D[][colAr2D], int rowAr2D, int colAr2D) { // Поиск максимального значения в двухмерном массиве, тип int
	array2D[rowAr2D][colAr2D];
	int i, j;
	int maxAr2D = array2D[0][0];
	for (i = 0; i < rowAr2D; i++) {
		for ( j = 0; j < colAr2D; j++)
			if (array2D[i][j] > maxAr2D) maxAr2D = array2D[i][j];
	}
	return maxAr2D;
}

double FuncMaxArray2D(double array2D[][colAr2D], int rowAr2D, int colAr2D) { // Поиск максимального значения в двухмерном массиве, тип double
	array2D[rowAr2D][colAr2D];
	int i, j;
	double maxAr2D = array2D[0][0];
	for (i = 0; i < rowAr2D; i++) {
		for (j = 0; j < colAr2D; j++)
			if (array2D[i][j] > maxAr2D) maxAr2D = array2D[i][j];
	}
	return maxAr2D;
}

char FuncMaxArray2D(char array2D[][colAr2D], int rowAr2D, int colAr2D) { // Поиск максимального значения в двухмерном массиве, тип char
	array2D[rowAr2D][colAr2D];
	int i, j;
	char maxAr2D = array2D[0][0];
	for (i = 0; i < rowAr2D; i++) {
		for (j = 0; j < colAr2D; j++)
			if (array2D[i][j] > maxAr2D) maxAr2D = array2D[i][j];
	}
	return maxAr2D;
}

template <typename T> T FuncMaxArray2DSample(T array2D[][colAr2D], int rowAr2D, int colAr2D) { // Поиск максимального значения в двухмерном массиве, тип int
	array2D[rowAr2D][colAr2D];
	int i, j;
	T maxAr2D = array2D[0][0];
	for (i = 0; i < rowAr2D; i++) {
		for (j = 0; j < colAr2D; j++)
			if (array2D[i][j] > maxAr2D) maxAr2D = array2D[i][j];
	}
	return maxAr2D;
}

void FuncFillingIntArray2D() {
	int array2D[rowAr2D][colAr2D];
	int i, j;
	cout << "   – целые числа (тип int):" << endl;
	for (i = 0; i < rowAr2D; i++) {
		cout << "     ";
		for (j = 0; j < colAr2D; j++) {
			array2D[i][j] = rand() % 90 + 10;
			cout << array2D[i][j] << " ";
		}
		cout << endl;
	}
	cout << "     max (перегруженная) = " << FuncMaxArray2D(array2D, rowAr2D, colAr2D) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMaxArray2DSample(array2D, rowAr2D, colAr2D) << ";" << endl;
}

void FuncFillingDoubleArray2D() {
	double array2D[rowAr2D][colAr2D];
	int i, j;
	cout << "   – числа с плавающей точкой (тип – double):" << endl;
	for (i = 0; i < rowAr2D; i++) {
		cout << "     ";
		for (j = 0; j < colAr2D; j++) {
			array2D[i][j] = (double) rand() / (double) RAND_MAX * (1000 - 100) + 100;
			cout << array2D[i][j] << " ";
		}
		cout << endl;
	}
	cout << "     max (перегруженная) = " << FuncMaxArray2D(array2D, rowAr2D, colAr2D) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMaxArray2DSample(array2D, rowAr2D, colAr2D) << ";" << endl;
}

void FuncFillingCharArray2D() {
	char array2D[rowAr2D][colAr2D];
	int i, j;
	cout << "   – символы (тип – char):" << endl;
	for (i = 0; i < rowAr2D; i++) {
		cout << "     ";
		for (j = 0; j < colAr2D; j++) {
			array2D[i][j] = rand() % 25 + 65;
			cout << array2D[i][j] << " ";
		}
		cout << endl;
	}
	cout << "     max (перегруженная) = " << FuncMaxArray2D(array2D, rowAr2D, colAr2D) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMaxArray2DSample(array2D, rowAr2D, colAr2D) << "." << endl;
}

int FuncMaxArray3D(int array3D[][colAr3D][layAr3D], int rowAr3D, int colAr3D, int layAr3D) { // Поиск максимального значения в трёхмерном массиве, тип int
	array3D[rowAr3D][colAr3D][layAr3D];
	int i, j, k;
	int maxAr3D = array3D[0][0][0];
	for (i = 0; i < rowAr3D; i++) {
		for (j = 0; j < colAr3D; j++) {
			for ( k = 0; k < layAr3D; k++)
				if (array3D[i][j][k] > maxAr3D) maxAr3D = array3D[i][j][k];
		}
	}
	return maxAr3D;
}

double FuncMaxArray3D(double array3D[][colAr3D][layAr3D], int rowAr3D, int colAr3D, int layAr3D) { // Поиск максимального значения в трёхмерном массиве, тип double
	array3D[rowAr3D][colAr3D][layAr3D];
	int i, j, k;
	double maxAr3D = array3D[0][0][0];
	for (i = 0; i < rowAr3D; i++) {
		for (j = 0; j < colAr3D; j++) {
			for (k = 0; k < layAr3D; k++)
				if (array3D[i][j][k] > maxAr3D) maxAr3D = array3D[i][j][k];
		}
	}
	return maxAr3D;
}

char FuncMaxArray3D(char array3D[][colAr3D][layAr3D], int rowAr3D, int colAr3D, int layAr3D) { // Поиск максимального значения в трёхмерном массиве, тип char
	array3D[rowAr3D][colAr3D][layAr3D];
	int i, j, k;
	char maxAr3D = array3D[0][0][0];
	for (i = 0; i < rowAr3D; i++) {
		for (j = 0; j < colAr3D; j++) {
			for (k = 0; k < layAr3D; k++)
				if (array3D[i][j][k] > maxAr3D) maxAr3D = array3D[i][j][k];
		}
	}
	return maxAr3D;
}

template <typename T> T FuncMaxArray3DSample(T array3D[][colAr3D][layAr3D], int rowAr3D, int colAr3D, int layAr3D) { // Поиск максимального значения в трёхмерном массиве
	array3D[rowAr3D][colAr3D][layAr3D];
	int i, j, k;
	T maxAr3D = array3D[0][0][0];
	for (i = 0; i < rowAr3D; i++) {
		for (j = 0; j < colAr3D; j++) {
			for ( k = 0; k < layAr3D; k++)
				if (array3D[i][j][k] > maxAr3D) maxAr3D = array3D[i][j][k];
		}
	}
	return maxAr3D;
}

void FuncFillingIntArray3D() {
	int array3D[rowAr3D][colAr3D][layAr3D];
	int i, j, k;
	cout << "   – целые числа (тип int):" << endl;
	for (i = 0; i < rowAr3D; i++){
		cout << "     " << i + 1 << " слой:" << endl;
		for (j = 0; j < rowAr2D; j++) {
			cout << "     ";
			for (k = 0; k < colAr2D; k++) {
				array3D[i][j][k] = rand() % 90 + 10;
				cout << array3D[i][j][k] << " ";
			}
			cout << endl;
		}
	}
	cout << "     max (перегруженная) = " << FuncMaxArray3D(array3D, rowAr3D, colAr3D, layAr3D) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMaxArray3DSample(array3D, rowAr3D, colAr3D, layAr3D) << ";" << endl;
}

void FuncFillingDoubleArray3D() {
	double array3D[rowAr3D][colAr3D][layAr3D];
	int i, j, k;
	cout << "   – числа с плавающей точкой (тип – double):" << endl;
	for (i = 0; i < rowAr3D; i++) {
		cout << "     " << i + 1 << " слой:" << endl;
		for (j = 0; j < rowAr2D; j++) {
			cout << "     ";
			for (k = 0; k < colAr2D; k++) {
				array3D[i][j][k] = (double)rand() / (double)RAND_MAX * (1000 - 100) + 100;
				cout << array3D[i][j][k] << " ";
			}
			cout << endl;
		}
	}
	cout << "     max (перегруженная) = " << FuncMaxArray3D(array3D, rowAr3D, colAr3D, layAr3D) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMaxArray3DSample(array3D, rowAr3D, colAr3D, layAr3D) << ";" << endl;
}

void FuncFillingCharArray3D() {
	char array3D[rowAr3D][colAr3D][layAr3D];
	int i, j, k;
	cout << "   – символы (тип – char):" << endl;
	for (i = 0; i < rowAr3D; i++) {
		cout << "     " << i + 1 << " слой:" << endl;
		for (j = 0; j < rowAr2D; j++) {
			cout << "     ";
			for (k = 0; k < colAr2D; k++) {
				array3D[i][j][k] = rand() % 25 + 66;
				cout << array3D[i][j][k] << " ";
			}
			cout << endl;
		}
	}
	cout << "     max (перегруженная) = " << FuncMaxArray3D(array3D, rowAr3D, colAr3D, layAr3D) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMaxArray3DSample(array3D, rowAr3D, colAr3D, layAr3D) << "." << endl;
}

int FuncMax2Elements(int elem1of2, int elem2of2) { // Выбор максимального значения из 2-х элементов, тип int
	return elem2of2 > elem1of2 ? elem2of2 : elem1of2;
}

double FuncMax2Elements(double elem1of2, double elem2of2) { // Выбор максимального значения из 2-х элементов, тип double
	return elem2of2 > elem1of2 ? elem2of2 : elem1of2;
}

char FuncMax2Elements(char elem1of2, char elem2of2) { // Выбор максимального значения из 2-х элементов, тип char
	return elem2of2 > elem1of2 ? elem2of2 : elem1of2;
}

template <typename T1> T1 FuncMax2ElementsSample(T1 elem1of2, T1 elem2of2) { // Выбор максимального значения из 2-х элементов
	return elem2of2 > elem1of2 ? elem2of2 : elem1of2;
}

void FuncGenerationInt2Elements() {
	int elem1of2 = rand() % 90 + 10, elem2of2 = rand() % 90 + 10;
	cout << "   – целые числа (тип int): " << elem1of2 << " и " << elem2of2 << ":" << endl;
	cout << "     max (перегруженная) = " << FuncMax2Elements (elem1of2, elem2of2) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMax2ElementsSample (elem1of2, elem2of2) << ";" << endl;
}

void FuncGenerationDouble2Elements() {
	double elem1of2 = (double)rand() / (double)RAND_MAX * (1000 - 100) + 100, elem2of2 = (double)rand() / (double)RAND_MAX * (1000 - 100) + 100;
	cout << "   – числа с плавающей точкой (тип – double): " << elem1of2 << " и " << elem2of2 << ":" << endl;
	cout << "     max (перегруженная) = " << FuncMax2Elements(elem1of2, elem2of2) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMax2ElementsSample(elem1of2, elem2of2) << ";" << endl;
}

void FuncGenerationChar2Elements() {
	char elem1of2 = rand() % 25 + 66, elem2of2 = rand() % 25 + 66;
	cout << "   – символы (тип – char): " << elem1of2 << " и " << elem2of2 << ":" << endl;
	cout << "     max (перегруженная) = " << FuncMax2Elements(elem1of2, elem2of2) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMax2ElementsSample(elem1of2, elem2of2) << "." << endl;
}

int FuncMax3Elements(int elem1of3, int elem2of3, int elem3of3) { // Выбор максимального значения из 3-х элементов, тип int
	return (elem3of3 > elem1of3 && elem3of3 > elem2of3) ? elem3of3 : (elem2of3 > elem1of3 ? elem2of3 : elem1of3);
}

double FuncMax3Elements(double elem1of3, double elem2of3, double elem3of3) { // Выбор максимального значения из 3-х элементов, тип double
	return (elem3of3 > elem1of3 && elem3of3 > elem2of3) ? elem3of3 : (elem2of3 > elem1of3 ? elem2of3 : elem1of3);
}

char FuncMax3Elements(char elem1of3, char elem2of3, char elem3of3) { // Выбор максимального значения из 3-х элементов, тип char
	return (elem3of3 > elem1of3 && elem3of3 > elem2of3) ? elem3of3 : (elem2of3 > elem1of3 ? elem2of3 : elem1of3);
}

template <typename T1> T1 FuncMax3ElementsSample(T1 elem1of3, T1 elem2of3, T1 elem3of3) { // Выбор максимального значения из 3-х элементов
	return (elem3of3 > elem1of3 && elem3of3 > elem2of3) ? elem3of3 : (elem2of3 > elem1of3 ? elem2of3 : elem1of3);
}

void FuncGenerationInt3Elements() {
	int elem1of3 = rand() % 90 + 10, elem2of3 = rand() % 90 + 10, elem3of3 = rand() % 90 + 10;
	cout << "   – целые числа (тип int): " << elem1of3 << ", " << elem2of3 << " и " << elem3of3 << ":" << endl;
	cout << "     max (перегруженная) = " << FuncMax3Elements(elem1of3, elem2of3, elem3of3) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMax3ElementsSample(elem1of3, elem2of3, elem3of3) << ";" << endl;
}

void FuncGenerationDouble3Elements() {
	double elem1of3 = (double)rand() / (double)RAND_MAX * (1000 - 100) + 100, elem2of3 = (double)rand() / (double)RAND_MAX * (1000 - 100) + 100, elem3of3 = (double)rand() / (double)RAND_MAX * (1000 - 100) + 100;
	cout << "   – числа с плавающей точкой (тип – double): " << elem1of3 << ", " << elem2of3 << " и " << elem3of3 << ":" << endl;
	cout << "     max (перегруженная) = " << FuncMax3Elements(elem1of3, elem2of3, elem3of3) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMax3ElementsSample(elem1of3, elem2of3, elem3of3) << ";" << endl;
}

void FuncGenerationChar3Elements() {
	char elem1of3 = rand() % 25 + 66, elem2of3 = rand() % 25 + 66, elem3of3 = rand() % 25 + 66;
	cout << "   – символы (тип – char): " << elem1of3 << ", " << elem2of3 << " и " << elem3of3 << ":" << endl;
	cout << "     max (перегруженная) = " << FuncMax3Elements(elem1of3, elem2of3, elem3of3) << ";" << endl;
	cout << "     max (шаблон) = " << FuncMax3ElementsSample(elem1of3, elem2of3, elem3of3) << "." << endl;
}

int FuncFillingArray(int array[], int size) {
	array[size];
	int i;
	cout << "  Генерация одномерного целочисленного массива, состоящего из " << size << " элементов:" << endl;
	for (i = 0; i < size; i++) {
		array[i] = (rand()%2 == 0 ? 1 : -1)*(rand() % 89 + 10);
		cout << array[i] << " ";
	}
	cout << endl;
	return array[size];
}

template <typename T> void FuncBubbleSort (T array [], int size) { // "Пузырьковая" сортировка
	array[size];
	T element;
	bool sorted;
	int i, j;
	cout << "  Исходный массив, отсортированный по возрастанию элементов:" << endl;
	for (i = 0; i < size; i++) {
		sorted = true;
		for (j = size - 1; j > i; j--) {
			if (array[j - 1] > array[j]) {
				element = array[j - 1];
				array[j - 1] = array[j];
				array[j] = element;
				sorted = false;
			}
		}
		if (sorted) break;
	}
}

template <typename T> void FuncInsertSort(T array[], int size) { // Сортировка методом вставок
	array[size];
	T element;
	int i, j;
	cout << "  Исходный массив, отсортированный по возрастанию элементов:" << endl;
	for (i = 0; i < size; i++) {
		element = array[i];
		for (j = i - 1; j >= 0 && array[j] > element; j--)
			array[j + 1] = array[j];
		array[j + 1] = element;
	}
}

template <typename T> void FuncSortPart(T array[], int size) { // Сортировка части по возрастанию, расположение остальных элементов в обратном порядке
	array[size];
	T element, sumElem = 0;
	int i, j;
	for (i = 0; i < size; i++)
		sumElem = sumElem + array[i];
	cout << "  Исходный преобразованный массив:" << endl;
	for (i = 0; i < ((sumElem < 0) ? size / 3 : size * 2 / 3); i++) {
		element = array[i];
		for (j = i - 1; j >= 0 && array[j] > element; j--)
			array[j + 1] = array[j];
		array[j + 1] = element;
	}
	for (i = ((sumElem < 0) ? size / 3 : size * 2 / 3); i < (size + ((sumElem < 0) ? size / 3 : size * 2 / 3))/2; i++) {
		element = array[i];
		array[i] = array[size + ((sumElem < 0) ? size / 3 : size * 2 / 3) - 1 - i];
		array[size + ((sumElem < 0) ? size / 3 : size * 2 / 3) - 1 - i] = element;
	}
}

template <typename T> void FuncMappingArray(T array[], int size) { // Отображение массива на экране
	array[size];
	int i; 
	for (i = 0; i < size; i++) {
		cout << array[i] << " ";
	}
	cout << endl;
}

int main() {
	setlocale(LC_ALL, "Rus");
	srand(time(NULL));
	
	cout << "\n\t\tФУНКЦИИ. ПЕРЕГРУЗКА ФУНКЦИЙ\n";

	cout << "\n\tЗадание 1, 3 \"Перегруженные функции и шаблоны (int, double, char)\"\n\n";
	cout << "  Генерация квадратной матрицы " << ordMatrix << "-го порядка:" << endl;
	FuncMatrixInt();
	system("pause");
	FuncMatrixDouble();
	system("pause");
	FuncMatrixChar();
	system("pause");

	cout << "\n\tЗадание 2, 3 \"Максимальное значение (int, double, char)\"\n\n";
	cout << "  Генерация одномерного массива, состоящего из " << sizeAr1D << " элементов:" << endl;
	FuncFillingIntArray1D();
	FuncFillingDoubleArray1D();
	FuncFillingCharArray1D();
	system("pause");
	cout << "  Генерация двухмерного массива, состоящего из " << rowAr2D * colAr2D << " элементов:" << endl;
	FuncFillingIntArray2D();
	FuncFillingDoubleArray2D();
	FuncFillingCharArray2D();
	system("pause");
	cout << "  Генерация трёхмерного массива, состоящего из " << rowAr3D * colAr3D * layAr3D << " элементов:" << endl;
	FuncFillingIntArray3D();
	system("pause");
	FuncFillingDoubleArray3D();
	system("pause");
	FuncFillingCharArray3D();
	system("pause");
	cout << "  Генерация двух элементов:" << endl;
	FuncGenerationInt2Elements();
	FuncGenerationDouble2Elements();
	FuncGenerationChar2Elements();
	cout << "  Генерация трёх элементов:" << endl;
	FuncGenerationInt3Elements();
	FuncGenerationDouble3Elements();
	FuncGenerationChar3Elements();
	system("pause");

	cout << "\n\t\tСОРТИРОВКА МАСИВОВ\n";
	const int size = 12;
	int array[size];

	cout << "\n\tЗадание 1 \"Пузырьковая\" сортировка одномерного массива целых чисел\"\n\n";
	FuncFillingArray(array, size);
	FuncBubbleSort(array, size);
	FuncMappingArray(array, size);
	system("pause");

	cout << "\n\tЗадание 2 \"Cортировка одномерного массива целых чисел методом вставок\"\n\n";
	FuncFillingArray(array, size);
	FuncInsertSort(array, size);
	FuncMappingArray(array, size);
	system("pause");

	cout << "\n\tЗадание 3 \"Успеваемость\"\n\n";
	const int sizeArSc = 10;
	int arrayScore[sizeArSc];
	int i, score, sumArSc;
	char option;
	cout << "  Введите изначально полученные оценки:" << endl;
	for (i = 0; i < sizeArSc; i++) {
		cout << "  " << i + 1 << ") ";
		cin >> arrayScore[i];
	}
	do
	{
		cout << "  Выберите вариант и введите соответствующий символ:" << endl;
		cout << "   a – вывести полученные оценки на экране;" << endl;
		cout << "   b – внести изменения в полученные оценки;" << endl;
		cout << "   c – получить информацию о начислении стипендии;" << endl;
		cout << "   любой другой символ – выход из программы." << endl;
		cin >> option;
		switch (option)
		{
		case 'a':
			cout << "  Полученные оценки: ";
			for (i = 0; i < sizeArSc; i++) {
				cout << arrayScore[i];
				i < sizeArSc - 1 ? cout << ", " : cout << ".";
			}
			cout << endl;
			break;
		case 'b':
			cout << "  Введите порядковый номер оценки, которую необходимо исправить: ";
			cin >> i;
			if (i >= 1 && i <= sizeArSc) {
				cout << "  Введите новую оценку: ";
				cin >> score;
				arrayScore[i - 1] = score;
			}
			else
				cout << "  Оценки с таким порядковым номером не существует!" << endl;
			break;
		case 'c':
			sumArSc = 0;
			for (i = 0; i < sizeArSc; i++)
				sumArSc += arrayScore[i];
			cout << "  По результатам оценок ";
			sumArSc / static_cast<double>(sizeArSc) >= 10.7 ? cout << "предусмотрено начисление стипендии" : cout << "начисление стипендии не предусмотрено";
			cout << "." << endl;
			break;
		default:
			break;
		}
	} while (option >= 'a' && option <= 'c');
	system("pause");

	cout << "\n\tЗадание 4 \"Сортировка части одномерного массива целых чисел по возрастанию,\n";
	cout << "\t\tперечисление остальных элементов в обратном порядке\"\n\n";
	FuncFillingArray(array, size);
	FuncSortPart(array, size);
	FuncMappingArray(array, size);
	return 0;
}
