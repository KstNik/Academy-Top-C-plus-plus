#include <iostream>
#include <math.h>
#include <stdlib.h>
#include <time.h>
using namespace std;

// Генерация одномерного целочисленного массива
int FuncFillingArray(int array[], int size) {
	array[size];
	int i;
	cout << "  Генерация одномерного целочисленного массива, состоящего из " << size << " элементов:" << endl;
	cout << "    ";
	for (i = 0; i < size; i++) {
		array[i] = (rand() % 2 == 0 ? 1 : -1) * (rand() % 89 + 10);
		cout << array[i] << " ";
	}
	cout << endl;
	return array[size];
}

// "Пузырьковая" сортировка
template <typename T> void FuncBubbleSort(T array[], int size) {
	array[size];
	bool sorted;
	int i, j;
	for (i = 0; i < size; i++) {
		sorted = true;
		for (j = size - 1; j > i; j--) {
			if (array[j - 1] > array[j]) {
				swap(array[j - 1], array[j]);
				sorted = false;
			}
		}
		if (sorted) break;
	}
}

// Сортировка методом вставок
template <typename T> void FuncInsertSort(T array[], int size) {
	array[size];
	T element;
	int i, j;
	for (i = 0; i < size; i++) {
		element = array[i];
		for (j = i - 1; j >= 0 && array[j] > element; j--)
			array[j + 1] = array[j];
		array[j + 1] = element;
	}
}

// Успеваемость
void FuncPerformance() {
	const int sizeArSc = 10;
	int arrayScore[sizeArSc];
	int i, score, sumArSc;
	char option;
	cout << "  Введите изначально полученные оценки:" << endl;
	for (i = 0; i < sizeArSc; i++) {
		cout << "  " << i + 1 << ") ";
		cin >> arrayScore[i];
	}
	do
	{
		cout << "  Выберите вариант и введите соответствующий символ:" << endl;
		cout << "   a – вывести полученные оценки на экране;" << endl;
		cout << "   b – внести изменения в полученные оценки;" << endl;
		cout << "   c – получить информацию о начислении стипендии;" << endl;
		cout << "   любой другой символ – выход из программы." << endl;
		cin >> option;
		switch (option)
		{
		case 'a':
			cout << "  Полученные оценки: ";
			for (i = 0; i < sizeArSc; i++) {
				cout << arrayScore[i];
				i < sizeArSc - 1 ? cout << ", " : cout << ".";
			}
			cout << endl;
			break;
		case 'b':
			cout << "  Введите порядковый номер оценки, которую необходимо исправить: ";
			cin >> i;
			if (i >= 1 && i <= sizeArSc) {
				cout << "  Введите новую оценку: ";
				cin >> score;
				arrayScore[i - 1] = score;
			}
			else
				cout << "  Оценки с таким порядковым номером не существует!" << endl;
			break;
		case 'c':
			sumArSc = 0;
			for (i = 0; i < sizeArSc; i++)
				sumArSc += arrayScore[i];
			cout << "  По результатам оценок ";
			sumArSc / static_cast<double>(sizeArSc) >= 10.7 ? cout << "предусмотрено начисление стипендии" : cout << "начисление стипендии не предусмотрено";
			cout << "." << endl;
			break;
		default:
			break;
		}
	} while (option >= 'a' && option <= 'c');
}

// Сортировка методом быстрого поиска
template <typename T> void FuncQuickSort(T array[], int size) {
	array[size];
	int i = 0, j = size;
	T p;
	p = array[size /2];
	do {
		while (array[i] < p) i++;
		while (array[j] > p) j--;
		if (i <= j) {
			swap(array[i], array[j]);
				i++;
			j--;
		}
	} while (i <= j);
	if (j > 0) FuncQuickSort(array, j);
	if (size > i) FuncQuickSort(array + i, size - i);
}

// Сортировка части по возрастанию, расположение остальных элементов в обратном порядке
template <typename T> void FuncSortPart(T array[], int size) {
	array[size];
	T element, sumElem = 0;
	int i, j;
	for (i = 0; i < size; i++)
		sumElem = sumElem + array[i];
	cout << "  Исходный преобразованный массив:" << endl;
	for (i = 0; i < ((sumElem < 0) ? size / 3 : size * 2 / 3); i++) {
		element = array[i];
		for (j = i - 1; j >= 0 && array[j] > element; j--)
			array[j + 1] = array[j];
		array[j + 1] = element;
	}
	for (i = ((sumElem < 0) ? size / 3 : size * 2 / 3); i < (size + ((sumElem < 0) ? size / 3 : size * 2 / 3)) / 2; i++) {
		element = array[i];
		array[i] = array[size + ((sumElem < 0) ? size / 3 : size * 2 / 3) - 1 - i];
		array[size + ((sumElem < 0) ? size / 3 : size * 2 / 3) - 1 - i] = element;
	}
}

// Отображение массива на экране
template <typename T> void FuncMappingArray(T array[], int size) {
	array[size];
	int i;
	cout << "    ";
	for (i = 0; i < size; i++) {
		cout << array[i] << " ";
	}
	cout << endl;
}

int main() {
	setlocale(LC_ALL, "Rus");
	srand(time(NULL));

	cout << "\n\t\tСОРТИРОВКА МАСИВОВ\n";
	const int size = 12;
	int array[size];

	cout << "\n\tЗадание 1 \"Пузырьковая\" сортировка одномерного массива целых чисел\"\n\n";
	FuncFillingArray(array, size);
	cout << "  Исходный массив, отсортированный по возрастанию элементов:" << endl;
	FuncBubbleSort(array, size);
	FuncMappingArray(array, size);
	system("pause");

	cout << "\n\tЗадание 2 \"Сортировка одномерного массива целых чисел методом вставок\"\n\n";
	FuncFillingArray(array, size);
	cout << "  Исходный массив, отсортированный по возрастанию элементов:" << endl;
	FuncInsertSort(array, size);
	FuncMappingArray(array, size);
	system("pause");

	cout << "\n\tЗадание 3 \"Успеваемость\"\n\n";
	FuncPerformance();
	system("pause");

	cout << "\n\tЗадание 4 \"Сортировка одномерного массива целых чисел методом быстрого поиска\"\n\n";
	FuncFillingArray(array, size);
	cout << "  Исходный массив, отсортированный по возрастанию элементов:" << endl;
	FuncQuickSort(array, size - 1);
	FuncMappingArray(array, size);
	system("pause");

	cout << "\n\tЗадание 5 \"Сортировка части одномерного массива целых чисел по возрастанию,\n";
	cout << "\t\tперечисление остальных элементов в обратном порядке\"\n\n";
	FuncFillingArray(array, size);
	FuncSortPart(array, size);
	FuncMappingArray(array, size);
	system("pause");
	return 0;
}
